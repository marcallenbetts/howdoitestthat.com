{"data":{"site":{"siteMetadata":{"title":"How Do I Test That?","author":"Marc Betts","labels":[{"tag":"react","tech":"React","name":"DiReact","size":20,"color":"deepskyblue"},{"tag":"git","tech":"Git","name":"DiGitMerge","size":20,"color":"white"},{"tag":"javascript","tech":"JavaScript","name":"DiJsBadge","size":20,"color":"yellow"},{"tag":"css","tech":"CSS","name":"DiCss3Full","size":20,"color":"teal"},{"tag":"python","tech":"Python","name":"DiPython","size":20,"color":"deepskyblue"},{"tag":"nodejs","tech":"Node.js","name":"DiNodejsSmall","size":20,"color":"lightgreen"},{"tag":"ruby","tech":"Ruby","name":"DiRuby","size":20,"color":"crimson"},{"tag":"java","tech":"Java","name":"FaJava","size":20,"color":"wheat"},{"tag":"angular","tech":"Angular","name":"DiAngularSimple","size":20,"color":"red"},{"tag":"html","tech":"HTML","name":"FaHtml5","size":20,"color":"darkorange"},{"tag":"php","tech":"php","name":"DiPhp","size":20,"color":"violet"},{"tag":"mongodb","tech":"MongoDB","name":"DiMongodb","size":20,"color":"green"},{"tag":"mongoose","tech":"Mongoose","name":"DiMongodb","size":20,"color":"green"},{"tag":"vscode","tech":"VS Code","name":"DiVisualstudio","size":20,"color":"deepskyblue"},{"tag":"android","tech":"Android","name":"DiAndroid","size":20,"color":"green"},{"tag":"cli","tech":"cli","name":"DiTerminal","size":20,"color":"white"},{"tag":"curl","tech":"curl","name":"DiTerminal","size":20,"color":"white"},{"tag":"mobile","tech":"Mobile","name":"FaMobileAlt","size":20,"color":"white"},{"tag":"proxy","tech":"proxy","name":"FaServer","size":20,"color":"white"},{"tag":"charlesproxy","tech":"Charles Proxy","name":"FaTools","size":20,"color":"white"},{"tag":"mitmproxy","tech":"mitmproxy","name":"FaTools","size":20,"color":"white"},{"tag":"postman","tech":"Postman","name":"DiTerminal","size":20,"color":"white"},{"tag":"newman","tech":"Newman","name":"FaTools","size":20,"color":"white"},{"tag":"express","tech":"Express","name":"FaJsSquare","size":20,"color":"white"},{"tag":"webserver","tech":"webserver","name":"FaServer","size":20,"color":"white"},{"tag":"nginx","tech":"NGINX","name":"FaServer","size":20,"color":"white"},{"tag":"apitesting","tech":"API Testing","name":"FaServer","size":20,"color":"white"},{"tag":"serveo","tech":"Serveo","name":"FaTools","size":20,"color":"white"},{"tag":"ngrok","tech":"ngrok","name":"FaTools","size":20,"color":"white"},{"tag":"localtunnel","tech":"Localtunnel","name":"FaTools","size":20,"color":"white"},{"tag":"network","tech":"Network","name":"FaEthernet","size":20,"color":"white"},{"tag":"lodash","tech":"Lodash","name":"FaJsSquare","size":20,"color":"white"},{"tag":"moment","tech":"Moment","name":"FaJsSquare","size":20,"color":"white"}]}},"allMarkdownRemark":{"totalCount":11,"edges":[{"node":{"excerpt":"I wasted a lot of time back in the day writing my API test frameworks. I learned\na lot from doing it, so I suppose it wasn't a total waste. The main thing I learned\nwas not to roll by own API…","html":"<p>I wasted a lot of time back in the day writing my API test frameworks. I learned\na lot from doing it, so I suppose it wasn't a total waste. The main thing I learned\nwas not to roll by own API frameworks.</p>\n<p>These days I'm using <a href=\"https://www.getpostman.com/\">Postman</a>. Its strength and weakness\nis that it does exactly one thing: sends API requests and tests the results. There is a\nJavaScript sandbox available, but the Postman team seems to have been very deliberate\nabout limiting the inclusion of extraneous JS libraries. So my natural instinct to want\nmy tests to upload test files, check database records, monitor log files, etc., is shut\ndown.</p>\n<p>But recently I cam across a scenario where I needed to verify an API response that required\nchecking a value that is intentionally not exposed to the user. For example, if a user is\nblacklisted you want to make sure that they are not allowed access to the system but you\ndon't necessarily want the user to know why they are blacklisted.</p>\n<p>So I set out to create the simplest API I could to check this so that my Postman scripts can\ncall the API to check the user status.  The database we're using is MongoDB, so I'm using\nMongoose. I've been using Express for some other projects I have in flight, so I decided to use\nit here as well.</p>\n<p>The whole thing is one file that clocks in at 24 lines of code. Let's take a look.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">require (&#39;dotenv&#39;).config()</code></pre></div>\n<p><code class=\"language-text\">dotenv</code> allows the script to pull info out of a <code class=\"language-text\">.env</code> file\nso that environment configuration is stored separately from\nthe script.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var express = require(&#39;express&#39;)\nvar app = express()\nvar port = process.env.PORT || 4001</code></pre></div>\n<p>This is the configuration for the web server. The port number\nis pulled from the <code class=\"language-text\">.env</code> file. If it doesn't exist there,\nit will default to use port 4001.</p>\n<p>As an aside, I'm never sure how developers determine what\ndefault port to use for their projects. Using 80 or 8080 seems\npresumption to assume those are not already in use. I chose\n4001 because there is a <a href=\"https://en.wikipedia.org/wiki/Rickenbacker_4001\">Rickenbacker 4001</a> sitting\non the stand next to the desk in my home office.</p>\n<figure style=\"width: 300px\" class=\"align-center\">\n\t<img src=\"/assets/images/rickenbacker.jpg\">\n\t<figcaption>Author with Rickenbacker 4001 back when he still had hair.</figcaption>\n</figure>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var mongoose = require(&#39;mongoose&#39;)\nmongoose.connect(process.env.MONGO_CONNECTION_STRING,\n    { useNewUrlParser: true, useFindAndModify: false,\n    &#39;useCreateIndex&#39;: true })</code></pre></div>\n<p>MONGO<em>CONNECTION</em>STRING is how we tell mongoose to\nconnect to a specific MongoDB instance. </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var Schema = mongoose.Schema\n\nvar blacklisted = new Schema({\n    _id: mongoose.Types.ObjectId,\n    blacklisted: Object,\n})\n\nvar BlacklistedModel = mongoose.model(&#39;user&#39;, blacklistedSchema)</code></pre></div>\n<p>The mongoose schema defines the rules of what\ndata can be stored in the database. In a non-trivial\napp, schemas can be complicated beasts. My initial\nthought was to grab a copy of the actual schema our\napplication was using, but realized I would be going down the path of creating a bigger API than the one I was testing. So I chose to restrict the schema to\nthe <code class=\"language-text\">_id</code> of the user and their <code class=\"language-text\">blacklisted</code> status.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">app.get(&#39;/user/:id&#39;, async (req, res) =&gt; {\n    var user = await BlacklistedModel.findOne(\n      {&#39;_id&#39;: mongoose.Types.ObjectId(req.params.id)}, \n      {&#39;_internal&#39;: 1})\n      .exec()\n    res.send(user)\n})</code></pre></div>\n<p>This is the piece that does the heavy lifting for our API. The route\nis define as <code class=\"language-text\">/user/:id</code>. When a request comes to that, mongoose will query the <code class=\"language-text\">user</code> collection with the id specified as <code class=\"language-text\">:id</code> and will return the response to the user.</p>\n<p>Request:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">http://localhost:4000/user/somemongodbuserid</code></pre></div>\n<p>Response:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{\n\t&quot;_id&quot;: &quot;somemongodbuserid&quot;,\n\t&quot;blacklisted&quot;: {\n\t\t&quot;reason&quot;: &quot;illegal activity&quot;,\n\t\t&quot;date&quot;: &quot;2019-01-03&quot;\n\t}\n}</code></pre></div>\n<p>With this I can now add requests to my Postman scripts\nto check user data that is not available our application's API.</p>\n<p>After using this for a short time, I made a couple of changes:</p>\n<ul>\n<li>Change the model and express route to a variable so that I could query any collection in the database</li>\n<li>Added a separate route to except query parameters so I could look up users by fields other than <code class=\"language-text\">_id</code></li>\n</ul>\n<h3>TL;DR</h3>\n<ul>\n<li><code class=\"language-text\">git clone git@github.com:marcallenbetts/simple-mongo-api.git</code></li>\n<li><code class=\"language-text\">npm install</code></li>\n<li><code class=\"language-text\">npm start</code></li>\n</ul>","id":"562b39e1-f422-5f2e-9e2e-7c1dbc915af4","frontmatter":{"title":"Creating an API to test an API","date":"January 05, 2019","tags":["postman","express","apitesting","mongoose","mongodb"]},"fields":{"slug":"/creating-an-api-to-test-an-api/"}}},{"node":{"excerpt":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sapien nisi, consequat nec dolor ut, lobortis vestibulum nunc. Nulla facilisi. Suspendisse leo urna, pulvinar ut pretium sit amet…","html":"<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sapien nisi, consequat nec dolor ut, lobortis vestibulum nunc. Nulla facilisi. Suspendisse leo urna, pulvinar ut pretium sit amet, consequat eget sapien. Nam ultricies in nulla finibus feugiat. Maecenas lacinia, lorem quis egestas convallis, tortor nunc consectetur est, vel finibus odio dui et nunc. Proin quis ante ut felis lacinia dignissim quis ac risus. Vestibulum a maximus est. Pellentesque malesuada eros ac diam aliquam, non pulvinar magna sodales. Fusce hendrerit malesuada quam, ut accumsan massa efficitur et. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Nullam vitae ornare sem, eget volutpat mauris. Praesent aliquet condimentum dui non bibendum. Nam dapibus rutrum mi sit amet luctus. Proin id vehicula risus. Nullam dictum, elit sit amet molestie eleifend, felis dolor scelerisque risus, sed dictum odio dolor id justo. Integer consectetur dui non tortor scelerisque, non vulputate sem laoreet:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const express = require(&#39;express&#39;)\nconst app = express()\nconst bodyParser = require(&#39;body-parser&#39;)\n\nconst cors = require(&#39;cors&#39;)\n\nconst mongoose = require(&#39;mongoose&#39;)\nmongoose.connect(process.env.DB_URI || &#39;mongodb://localhost/dbname&#39; )\n\napp.use(cors())\n\napp.use(bodyParser.urlencoded({extended: false}))\napp.use(bodyParser.json())\n\n\napp.use(express.static(&#39;public&#39;))\napp.get(&#39;/&#39;, (req, res) =&gt; {\n  res.sendFile(__dirname + &#39;/views/index.html&#39;)\n});\n\n\n// Not found middleware\napp.use((req, res, next) =&gt; {\n  return next({status: 404, message: &#39;not found&#39;})\n})\n\n\nconst listener = app.listen(process.env.PORT || 3000, () =&gt; {\n  console.log(&#39;Your app is listening on port &#39; + listener.address().port)\n})</code></pre></div>\n<br>\n<p>Nunc blandit purus sit amet justo vehicula, at venenatis ante tempus. Integer sagittis ultrices lorem, ut faucibus erat molestie quis. Phasellus semper orci nisl, egestas maximus risus porta sit amet. Fusce vitae egestas sem. Nunc sagittis, erat sodales maximus tempus, magna diam iaculis ex, ut feugiat odio libero sit amet lectus. Suspendisse elit turpis, volutpat laoreet consequat ac, ultricies eu sem. Donec non orci in justo porta iaculis. Donec pulvinar nunc quis viverra volutpat. Quisque et orci non enim sodales eleifend. Etiam in enim id nulla posuere lacinia. Ut rutrum pharetra nisi quis feugiat. Cras arcu lectus, euismod a lacinia a, cursus vitae magna. Aenean ultricies, enim id pharetra ultricies, ligula lectus congue tellus, ac lobortis ex elit at nulla. Sed lobortis vitae tortor sed laoreet. Praesent porta bibendum ullamcorper:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// Not found middleware\napp.use((req, res, next) =&gt; {\n  return next({status: 404, message: &#39;not found&#39;})\n})\n\napp.post(&#39;/api/users/new-user&#39;, (req, res) =&gt;{\n const firstName = req.body.first_name;\n const lastName  = req.body.last_name;\n res.json({first_name: firstName, last_name: lastName, &quot;status&quot;: &quot;registered&quot;});\n})</code></pre></div>\n<br>\n<p>Integer fermentum euismod risus, vitae fringilla erat condimentum at. Suspendisse luctus egestas dui, eu dictum sem tincidunt sed. Sed efficitur eget orci eu dictum. Etiam faucibus, enim nec tincidunt sollicitudin, diam neque ultricies magna, eget ultrices sem tortor non justo. Vestibulum viverra tincidunt elit sit amet gravida. Morbi sed tempus odio. Nunc efficitur ultricies elit et porta. Praesent finibus placerat felis, vitae efficitur ligula sagittis non. Nam fringilla malesuada ligula ullamcorper dignissim.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">app.use((req, res, next) =&gt; {\n  console.log(&#39;fire 1&#39;)\n  return next({status: 404, message: &#39;not found&#39;})\n});\n\napp.post(&#39;/api/users/new-user&#39;, (req, res) =&gt;{\n  console.log(&#39;fire 2&#39;)\n  const firstName = req.body.first_name;\n  const lastName  = req.body.last_name;\n  res.json({first_name: firstName, last_name: lastName, &quot;status&quot;: &quot;registered&quot;});\n});</code></pre></div>\n<br>\n<p>Morbi mauris lacus, vehicula eget ullamcorper et, fringilla at ipsum. Nam tempus felis ex, congue varius urna consectetur eget. Cras tempor condimentum accumsan. In hac habitasse platea dictumst. Nulla pharetra mauris enim, quis dictum ipsum dictum sed. Sed luctus eros volutpat, luctus augue et, tempus ante:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Your app is listening on port 3000\nfire 1\n[object Object]</code></pre></div>\n<br>\n<p>Sed imperdiet diam id luctus faucibus. Sed ullamcorper suscipit arcu, in dictum lectus ultricies et. Donec accumsan a ipsum sed aliquet. Nulla auctor justo eget tincidunt egestas. Cras blandit, ante vitae facilisis hendrerit, justo mauris fermentum diam, id congue diam velit eu ipsum. Nullam pulvinar auctor tincidunt. Maecenas felis velit, bibendum ac purus nec, cursus lacinia nulla. Sed posuere orci sapien, id accumsan eros feugiat vel. Aenean convallis lacinia orci. In metus elit, iaculis vitae nisi vel, iaculis vehicula mi.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// not-found middleware\napp.use((req, res, next) =&gt; {\n  console.log(&#39;fire 1&#39;)\n  return next({status: 404, message: &#39;not found&#39;})\n});\n\n// error-handler middleware\napp.use((err, req, res, next) =&gt; {\n  console.log(&#39;fire 2&#39;)\n  console.log(err);\n  let errCode, errMessage\n\n  if (err.errors) {\n    // mongoose validation error\n    errCode = 400 // bad request\n    const keys = Object.keys(err.errors)\n    // report the first validation error\n    errMessage = err.errors[keys[0]].message\n  } else {\n    // generic or custom error\n    errCode = err.status || 500\n    errMessage = err.message || &#39;Internal Server Error&#39;\n  }\n  res.status(errCode).type(&#39;txt&#39;)\n    .send(errMessage)\n});\n\napp.post(&#39;/api/users/new-user&#39;, (req, res) =&gt;{\n  console.log(&#39;fire 3&#39;)\n  const firstName = req.body.first_name;\n  const lastName  = req.body.last_name;\n  res.json({first_name: firstName, last_name: lastName, &quot;status&quot;: &quot;registered&quot;});\n});</code></pre></div>\n<br>\n<p>Nam elementum augue vel nulla consectetur elementum. Curabitur tincidunt hendrerit justo. Praesent nisl dui, mollis vitae quam eu, dignissim faucibus lorem:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Your app is listening on port 3000\nfire 1\nfire 2\n{ status: 404, message: &#39;not found&#39; }</code></pre></div>\n<br>\n<p>Sed vitae erat at sem suscipit laoreet nec vel diam. Donec at quam sapien. Nulla quis egestas metus, ut tempus elit. Vivamus placerat diam ac ultrices finibus. Aenean vitae molestie eros. Curabitur pulvinar ornare est volutpat consequat. Vivamus ullamcorper pharetra leo ac volutpat. Curabitur efficitur egestas posuere. Duis ut sagittis diam, sed sollicitudin lectus. Phasellus in lorem maximus, volutpat felis non, fringilla mi. Curabitur in fringilla sem, nec rhoncus elit. Aenean non ante dignissim elit suscipit hendrerit sit amet nec eros. Curabitur feugiat, metus non convallis scelerisque, nisl urna imperdiet velit, eget semper enim ante eget lorem.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">app.post(&#39;/api/users/new-user&#39;, (req, res) =&gt;{\n  console.log(&#39;fire 1&#39;)\n  const firstName = req.body.first_name;\n  const lastName  = req.body.last_name;\n  res.json({first_name: firstName, last_name: lastName, &quot;status&quot;: &quot;registered&quot;});\n});\n\n\n// Not found middleware\napp.use((req, res, next) =&gt; {\n  console.log(&#39;fire 2&#39;)\n  return next({status: 404, message: &#39;not found&#39;})\n});\n\n// Error Handling middleware\napp.use((err, req, res, next) =&gt; {\n  console.log(&#39;fire 3&#39;)\n  console.log(err);\n  let errCode, errMessage\n\n  if (err.errors) {\n    // mongoose validation error\n    errCode = 400 // bad request\n    const keys = Object.keys(err.errors)\n    // report the first validation error\n    errMessage = err.errors[keys[0]].message\n  } else {\n    // generic or custom error\n    errCode = err.status || 500\n    errMessage = err.message || &#39;Internal Server Error&#39;\n  }\n  res.status(errCode).type(&#39;txt&#39;)\n    .send(errMessage)\n})</code></pre></div>\n<br>\n<p>Nulla pharetra mauris enim, quis dictum ipsum dictum sed. Sed luctus eros volutpat, luctus augue et, tempus ante. Sed imperdiet diam id luctus faucibus. Sed ullamcorper suscipit arcu, in dictum lectus ultricies et. Donec accumsan a ipsum sed aliquet. Nulla auctor justo eget tincidunt egestas:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Your app is listening on port 3000\nfire 1</code></pre></div>\n<br>\n<p> Donec at quam sapien. Nulla quis egestas metus, ut tempus elit. Vivamus placerat diam ac ultrices finibus. Aenean vitae molestie eros. Curabitur pulvinar ornare est volutpat consequat. Vivamus ullamcorper pharetra leo ac volutpat. Curabitur efficitur egestas posuere.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{&quot;first_name&quot;:&quot;Walter&quot;,&quot;last_name&quot;:&quot;White&quot;,&quot;status&quot;:&quot;registered&quot;}</code></pre></div>\n<br>\n<p>consectetur elementum.</p>","id":"21cf01b4-e10b-5b0b-b40a-a385f69f9b2e","frontmatter":{"title":"Misplaced Middleware in Express","date":"December 29, 2018","tags":["nodejs","express"]},"fields":{"slug":"/misplaced-middleware-in-express/"}}},{"node":{"excerpt":"The first question I ask when trying to figure out how to test something is \"what are the moving parts?\" I'm\nalways trying to see what is changing the helps understand what the application is doing. I…","html":"<p>The first question I ask when trying to figure out how to test something is \"what are the moving parts?\" I'm\nalways trying to see what is changing the helps understand what the application is doing. I'm looking for\nthings like database records that are touched or log file output. And in a lot of applications, it's\nnetwork requests.</p>\n<p>For network requests, knowing how to use a proxy is an invaluable tool. My current proxy of choice is\n<a href=\"https://www.charlesproxy.com/\">Charles Proxy</a>, but will turn to <a href=\"https://mitmproxy.org/\">mitmproxy</a> in a pinch.</p>\n<p>One of the apps I'm currently testing includes <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Preflight_request\">preflight requests</a>\nfor all API requests. I was trying to use Charles to rewrite some of the requests for some of the tests, but\ncouldn't find any way within Charles to distinguish between OPTIONS requests and POST requests. This was causing\nthe OPTIONS requests to get rewritten in a way that the app didn't care for.</p>\n<p>The solution I came up with was to use (NGINX)[https://www.nginx.com/] as a proxy to filter the requests before\nthey get to Charles. This allows me to route the OPTIONS request directly to the server to deal with and the POST\nrequests are sent to the proxy where they can manipulated for testing.</p>\n<p>The nginx.conf for this setup looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">server {\n\tlisten 8085;\n\terror_page 405 =200 $uri;\n\tlocation / {\n\t\tif ($request_method = OPTIONS) {\n\t\t\tproxy_pass REMOTE_HOST;\n\t\t}\n\t\tif ($request_method != OPTIONS) {\n\t\t\tproxy_pass LOCAL_HOST:8084;\n\t\t}\n\t}\n}</code></pre></div>\n<p>This will run NGINX on port 8085 and redirect all non-OPTIONS requests to a proxy\nserver running on port 8084. The proxy server needs to be configured as a reverse\nproxy on port 8084.</p>\n<h3>TL;DR</h3>\n<ol>\n<li>Configure a reverse proxy to listen on port 8084</li>\n<li>Configure app to use proxy on port 8085</li>\n<li><code class=\"language-text\">git clone git@github.com:marcallenbetts/nginx-proxy-and-errors.git</code></li>\n<li><code class=\"language-text\">docker-compose up --build</code></li>\n</ol>","id":"b8577c83-e952-59d8-9801-9fd079209d82","frontmatter":{"title":"Using NGINX as a filtering proxy","date":"December 23, 2018","tags":["nginx","proxy","charlesproxy","mitmproxy","webserver"]},"fields":{"slug":"/nginx-proxy-filter/"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"limit":3,"skip":6,"numPages":4,"currentPage":3}}