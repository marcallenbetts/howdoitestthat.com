{"componentChunkName":"component---src-templates-tag-js","path":"/tags/cli/","result":{"data":{"site":{"siteMetadata":{"title":"How Do I Test That?","author":"Marc Betts","labels":[{"tag":"web","tech":"Web","name":"FaChrome","size":20,"color":"white"},{"tag":"react","tech":"React","name":"DiReact","size":20,"color":"deepskyblue"},{"tag":"git","tech":"Git","name":"DiGitMerge","size":20,"color":"white"},{"tag":"javascript","tech":"JavaScript","name":"DiJsBadge","size":20,"color":"yellow"},{"tag":"css","tech":"CSS","name":"DiCss3Full","size":20,"color":"teal"},{"tag":"python","tech":"Python","name":"DiPython","size":20,"color":"deepskyblue"},{"tag":"nodejs","tech":"Node.js","name":"DiNodejsSmall","size":20,"color":"lightgreen"},{"tag":"ruby","tech":"Ruby","name":"DiRuby","size":20,"color":"crimson"},{"tag":"java","tech":"Java","name":"FaJava","size":20,"color":"wheat"},{"tag":"angular","tech":"Angular","name":"DiAngularSimple","size":20,"color":"red"},{"tag":"html","tech":"HTML","name":"FaHtml5","size":20,"color":"darkorange"},{"tag":"php","tech":"php","name":"DiPhp","size":20,"color":"violet"},{"tag":"mongodb","tech":"MongoDB","name":"DiMongodb","size":20,"color":"green"},{"tag":"mongoose","tech":"Mongoose","name":"DiMongodb","size":20,"color":"green"},{"tag":"vscode","tech":"VS Code","name":"DiVisualstudio","size":20,"color":"deepskyblue"},{"tag":"android","tech":"Android","name":"DiAndroid","size":20,"color":"green"},{"tag":"ios","tech":"iOS","name":"FaApple","size":20,"color":"white"},{"tag":"cli","tech":"cli","name":"DiTerminal","size":20,"color":"white"},{"tag":"curl","tech":"curl","name":"DiTerminal","size":20,"color":"white"},{"tag":"mobile","tech":"Mobile","name":"FaMobileAlt","size":20,"color":"white"},{"tag":"proxy","tech":"proxy","name":"FaServer","size":20,"color":"white"},{"tag":"charlesproxy","tech":"CharlesProxy","name":"FaTools","size":20,"color":"white"},{"tag":"mitmproxy","tech":"mitmproxy","name":"FaTools","size":20,"color":"white"},{"tag":"postman","tech":"Postman","name":"DiTerminal","size":20,"color":"white"},{"tag":"newman","tech":"Newman","name":"FaTools","size":20,"color":"white"},{"tag":"express","tech":"Express","name":"FaJsSquare","size":20,"color":"white"},{"tag":"webserver","tech":"webserver","name":"FaServer","size":20,"color":"white"},{"tag":"nginx","tech":"NGINX","name":"FaServer","size":20,"color":"white"},{"tag":"apitesting","tech":"APITesting","name":"FaServer","size":20,"color":"white"},{"tag":"serveo","tech":"Serveo","name":"FaTools","size":20,"color":"white"},{"tag":"ngrok","tech":"ngrok","name":"FaTools","size":20,"color":"white"},{"tag":"localtunnel","tech":"Localtunnel","name":"FaTools","size":20,"color":"white"},{"tag":"network","tech":"Network","name":"FaEthernet","size":20,"color":"white"},{"tag":"lodash","tech":"Lodash","name":"FaJsSquare","size":20,"color":"white"},{"tag":"moment","tech":"Moment","name":"FaJsSquare","size":20,"color":"white"}]}},"allMarkdownRemark":{"totalCount":4,"edges":[{"node":{"excerpt":"I've been using mitmproxy pretty much non-stop for the\npast several months. My current daily workflow consists of a proxy and two reverse \nproxies. From anywhere within mitmproxy, entering  will…","html":"<p>I've been using <a href=\"https://mitmproxy.org/\">mitmproxy</a> pretty much non-stop for the\npast several months. My current daily workflow consists of a proxy and two reverse\nproxies.</p>\n<p>From anywhere within mitmproxy, entering <code class=\"language-text\">?</code> will display context-sensitive help. For\nthe most part, the documentation is great. The one thing I was not able to find\nwas how to export a request as a curl request, which are useful when trying to share\nrequests with team mates.</p>\n<p>After Googling it for a bit, I finally came across how to do it:</p>\n<ul>\n<li>enter <code class=\"language-text\">w</code> to enter export mode</li>\n<li>enter <code class=\"language-text\">export.clip curl @focus</code> to copy curl request to clipboard</li>\n</ul>\n<p>It works, but I'm still going to reference my notes I need to remember the\nexact syntax. Luckily, mitmproxy has <a href=\"https://docs.mitmproxy.org/stable/tools-mitmproxy/\">key binding</a>\nsupport. So, by adding the following to <code class=\"language-text\">~/.mitmproxy/keys.yaml</code>\nI now have a shortcut to copy a curl request from mitmproxy.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">-\n  key: c\n  cmd: export.clip curl @focus</code></pre></div>","id":"d6d66c27-1540-595f-9594-2ea4528580fa","frontmatter":{"title":"Export curl from mitmproxy","date":"July, 2019","tags":["mitmproxy","proxy","cli","curl"]},"fields":{"slug":"/export-curl-from-mitm-proxy/"}}},{"node":{"excerpt":"I use Charles Proxy pretty much nonstop when \ntesting. As a backup I use mitmproxy. It lacks a bit\nof the polished UI that Charles provides, but it is free and open source. And it\ngets cool points for…","html":"<p>I use <a href=\"https://www.charlesproxy.com/\">Charles Proxy</a> pretty much nonstop when\ntesting. As a backup I use <a href=\"https://mitmproxy.org/\">mitmproxy</a>. It lacks a bit\nof the polished UI that Charles provides, but it is free and open source. And it\ngets cool points for being a command line tool.</p>\n<p>These notes cover only a fraction of what mitmproxy can do, but is pretty much\neverything I need most days.</p>\n<h3>Install</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">brew install mitmproxy</code></pre></div>\n<h3>Help</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">mitmproxy --help</code></pre></div>\n<h3>Start proxy on port 8989</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">mitmproxy --listen-port 8989 --ssl-insecure \n--set console_mouse=false</code></pre></div>\n<p>The <code class=\"language-text\">ssl-insecure</code> flag ignores insecure SSL sites, which is common in\na lot of the test environments I use. The <code class=\"language-text\">console_mouse</code> option makes it\neasier to copy/paste output from the terminal.</p>\n<h3>Start reverse proxy on port 8989 that directs traffic to port 4001</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">mitmproxy —-listen-port 8989 —-ssl-insecure\n-—set console_mouse=false \n-—mode reverse:http://localhost:4001</code></pre></div>\n<h3>Navigation</h3>\n<ul>\n<li><code class=\"language-text\">j</code>/<code class=\"language-text\">k</code>: down/up</li>\n<li><code class=\"language-text\">enter</code>: select request</li>\n<li><code class=\"language-text\">q</code>: back/quit</li>\n<li><code class=\"language-text\">z</code>: clear requests</li>\n</ul>","id":"7a1ebc26-954d-56c1-8316-f79729162e2a","frontmatter":{"title":"mitmproxy cheat sheet","date":"July, 2019","tags":["mitmproxy","proxy","cli","charlesproxy"]},"fields":{"slug":"/mitm-proxy-cheat-sheet/"}}},{"node":{"excerpt":"I haven't had to do much mobile app testing recently, but last week I got dragged back in\nto it for an afternoon. I was very quickly reminded how much I hate testing mobile apps. The task I needed to…","html":"<p>I haven't had to do much mobile app testing recently, but last week I got dragged back in\nto it for an afternoon. I was very quickly reminded how much I hate testing mobile apps.</p>\n<p>The task I needed to accomplish was fairly straightforward: log in with a dozen or so\ntest accounts and verify that the accounts had been created correctly. This was going\nto be a one off activity so trying to automate it would have little ROI.</p>\n<p>But just having to type a dozen usernames and passwords on a phone keyboard is enough\nto try my patience, so I fall back to using <a href=\"https://developer.android.com/studio/command-line/adb\">Android Debug Bridge</a>.</p>\n<p>The problem is that I don't use adb often enough to remember how to use it. So I decided\nto write a simplified wrapper for it to make it simple to use the small subset of commands\nthat I actually need, specifically sending text and taking screenshots.</p>\n<p>If situations change and I get sucked back in to the mobile testing world, I may spend\nsome more time making this more usefull.</p>\n<h3>TL;DR</h3>\n<ul>\n<li><code class=\"language-text\">git clone git@github.com:marcallenbetts/android-test-util.git</code></li>\n<li><code class=\"language-text\">npm install</code></li>\n<li><code class=\"language-text\">node atu.js</code></li>\n<li><code class=\"language-text\">help</code></li>\n</ul>","id":"9c818c9b-8031-5637-a1c7-560274a88a69","frontmatter":{"title":"Android test utils","date":"February, 2019","tags":["android","cli","mobile"]},"fields":{"slug":"/android-test-utils/"}}},{"node":{"excerpt":"Anybody who has worked with me for more than five minutes know that I have two \nbasic categories of test tools that I gravitate toward: proxies and command line\ntools. Proxies are great because they…","html":"<p>Anybody who has worked with me for more than five minutes know that I have two\nbasic categories of test tools that I gravitate toward: proxies and command line\ntools.</p>\n<p>Proxies are great because they give you valuable insight in to the network requests\nyour application is making that aren't usually visible from within the app. Command line\ntools are great for lots of reasons, mainly because junior developers and less tech savvy\npeople on the team will think you are some sort of super hacker wizard if they walk by and see\nyou frantically typing in a terminal window.</p>\n<p>But it's not alwasy obvious how to get your terminal to send network traffic to a proxy.</p>\n<p>These days I use <a href=\"https://www.getpostman.com/\">Postman</a> as my API test tool of choice. It's\na solid tool for testing and includes a commmand line runner (Newman). When using the GUI,\nit's really easy to see the requests and responses. When running Newman from the command line, not\nso much.</p>\n<p>So how do you configure CLIs to use a local proxy? Turns out you just need to set the <code class=\"language-text\">http_proxy</code>\nenvironment variable. And when you're done you can <code class=\"language-text\">unset</code> it. (Examples below use the default port for <a href=\"https://www.charlesproxy.com/\">Charles Proxy</a>).</p>\n<h3>TL;DR</h3>\n<ul>\n<li><code class=\"language-text\">export http_proxy=http://localhost:8888</code></li>\n<li><code class=\"language-text\">export https_proxy=http://localhost:8888</code></li>\n<li><code class=\"language-text\">unset http_proxy</code></li>\n<li><code class=\"language-text\">unset https_proxy</code></li>\n</ul>","id":"0a746cb0-582d-53ae-af9d-c03afa3a974f","frontmatter":{"title":"Proxy command line processes","date":"January, 2019","tags":["proxy","charlesproxy","postman","newman","cli"]},"fields":{"slug":"/proxy-command-line-processes/"}}}]}},"pageContext":{"tag":"cli"}},"staticQueryHashes":["392256161","551055924","63159454"]}