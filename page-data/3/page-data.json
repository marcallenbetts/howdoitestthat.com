{"componentChunkName":"component---src-templates-post-list-js","path":"/3","result":{"data":{"site":{"siteMetadata":{"title":"How Do I Test That?","author":"Marc Betts","labels":[{"tag":"web","tech":"Web","name":"FaChrome","size":20,"color":"white"},{"tag":"react","tech":"React","name":"DiReact","size":20,"color":"deepskyblue"},{"tag":"git","tech":"Git","name":"DiGitMerge","size":20,"color":"white"},{"tag":"javascript","tech":"JavaScript","name":"DiJsBadge","size":20,"color":"yellow"},{"tag":"css","tech":"CSS","name":"DiCss3Full","size":20,"color":"teal"},{"tag":"python","tech":"Python","name":"DiPython","size":20,"color":"deepskyblue"},{"tag":"nodejs","tech":"Node.js","name":"DiNodejsSmall","size":20,"color":"lightgreen"},{"tag":"ruby","tech":"Ruby","name":"DiRuby","size":20,"color":"crimson"},{"tag":"java","tech":"Java","name":"FaJava","size":20,"color":"wheat"},{"tag":"angular","tech":"Angular","name":"DiAngularSimple","size":20,"color":"red"},{"tag":"html","tech":"HTML","name":"FaHtml5","size":20,"color":"darkorange"},{"tag":"php","tech":"php","name":"DiPhp","size":20,"color":"violet"},{"tag":"mongodb","tech":"MongoDB","name":"DiMongodb","size":20,"color":"green"},{"tag":"mongoose","tech":"Mongoose","name":"DiMongodb","size":20,"color":"green"},{"tag":"vscode","tech":"VS Code","name":"DiVisualstudio","size":20,"color":"deepskyblue"},{"tag":"android","tech":"Android","name":"DiAndroid","size":20,"color":"green"},{"tag":"ios","tech":"iOS","name":"FaApple","size":20,"color":"white"},{"tag":"cli","tech":"cli","name":"DiTerminal","size":20,"color":"white"},{"tag":"curl","tech":"curl","name":"DiTerminal","size":20,"color":"white"},{"tag":"mobile","tech":"Mobile","name":"FaMobileAlt","size":20,"color":"white"},{"tag":"proxy","tech":"proxy","name":"FaServer","size":20,"color":"white"},{"tag":"charlesproxy","tech":"CharlesProxy","name":"FaTools","size":20,"color":"white"},{"tag":"mitmproxy","tech":"mitmproxy","name":"FaTools","size":20,"color":"white"},{"tag":"postman","tech":"Postman","name":"DiTerminal","size":20,"color":"white"},{"tag":"newman","tech":"Newman","name":"FaTools","size":20,"color":"white"},{"tag":"express","tech":"Express","name":"FaJsSquare","size":20,"color":"white"},{"tag":"webserver","tech":"webserver","name":"FaServer","size":20,"color":"white"},{"tag":"nginx","tech":"NGINX","name":"FaServer","size":20,"color":"white"},{"tag":"apitesting","tech":"APITesting","name":"FaServer","size":20,"color":"white"},{"tag":"serveo","tech":"Serveo","name":"FaTools","size":20,"color":"white"},{"tag":"ngrok","tech":"ngrok","name":"FaTools","size":20,"color":"white"},{"tag":"localtunnel","tech":"Localtunnel","name":"FaTools","size":20,"color":"white"},{"tag":"network","tech":"Network","name":"FaEthernet","size":20,"color":"white"},{"tag":"lodash","tech":"Lodash","name":"FaJsSquare","size":20,"color":"white"},{"tag":"moment","tech":"Moment","name":"FaJsSquare","size":20,"color":"white"}]}},"allMarkdownRemark":{"totalCount":16,"edges":[{"node":{"excerpt":"I've been using mitmproxy pretty much non-stop for the\npast several months. My current daily workflow consists of a proxy and two reverse \nproxies. From anywhere within mitmproxy, entering  will…","html":"<p>I've been using <a href=\"https://mitmproxy.org/\">mitmproxy</a> pretty much non-stop for the\npast several months. My current daily workflow consists of a proxy and two reverse\nproxies.</p>\n<p>From anywhere within mitmproxy, entering <code class=\"language-text\">?</code> will display context-sensitive help. For\nthe most part, the documentation is great. The one thing I was not able to find\nwas how to export a request as a curl request, which are useful when trying to share\nrequests with team mates.</p>\n<p>After Googling it for a bit, I finally came across how to do it:</p>\n<ul>\n<li>enter <code class=\"language-text\">w</code> to enter export mode</li>\n<li>enter <code class=\"language-text\">export.clip curl @focus</code> to copy curl request to clipboard</li>\n</ul>\n<p>It works, but I'm still going to reference my notes I need to remember the\nexact syntax. Luckily, mitmproxy has <a href=\"https://docs.mitmproxy.org/stable/tools-mitmproxy/\">key binding</a>\nsupport. So, by adding the following to <code class=\"language-text\">~/.mitmproxy/keys.yaml</code>\nI now have a shortcut to copy a curl request from mitmproxy.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">-\n  key: c\n  cmd: export.clip curl @focus</code></pre></div>","id":"d6d66c27-1540-595f-9594-2ea4528580fa","frontmatter":{"title":"Export curl from mitmproxy","date":"July 20, 2019","tags":["mitmproxy","proxy","cli","curl"]},"fields":{"slug":"/export-curl-from-mitm-proxy/"}}},{"node":{"excerpt":"I use Charles Proxy pretty much nonstop when \ntesting. As a backup I use mitmproxy. It lacks a bit\nof the polished UI that Charles provides, but it is free and open source. And it\ngets cool points for…","html":"<p>I use <a href=\"https://www.charlesproxy.com/\">Charles Proxy</a> pretty much nonstop when\ntesting. As a backup I use <a href=\"https://mitmproxy.org/\">mitmproxy</a>. It lacks a bit\nof the polished UI that Charles provides, but it is free and open source. And it\ngets cool points for being a command line tool.</p>\n<p>These notes cover only a fraction of what mitmproxy can do, but is pretty much\neverything I need most days.</p>\n<h3>Install</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">brew install mitmproxy</code></pre></div>\n<h3>Help</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">mitmproxy --help</code></pre></div>\n<h3>Start proxy on port 8989</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">mitmproxy --listen-port 8989 --ssl-insecure \n--set console_mouse=false</code></pre></div>\n<p>The <code class=\"language-text\">ssl-insecure</code> flag ignores insecure SSL sites, which is common in\na lot of the test environments I use. The <code class=\"language-text\">console_mouse</code> option makes it\neasier to copy/paste output from the terminal.</p>\n<h3>Start reverse proxy on port 8989 that directs traffic to port 4001</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">mitmproxy —-listen-port 8989 —-ssl-insecure\n-—set console_mouse=false \n-—mode reverse:http://localhost:4001</code></pre></div>\n<h3>Navigation</h3>\n<ul>\n<li><code class=\"language-text\">j</code>/<code class=\"language-text\">k</code>: down/up</li>\n<li><code class=\"language-text\">enter</code>: select request</li>\n<li><code class=\"language-text\">q</code>: back/quit</li>\n<li><code class=\"language-text\">z</code>: clear requests</li>\n</ul>","id":"7a1ebc26-954d-56c1-8316-f79729162e2a","frontmatter":{"title":"mitmproxy cheat sheet","date":"July 20, 2019","tags":["mitmproxy","proxy","cli","charlesproxy"]},"fields":{"slug":"/mitm-proxy-cheat-sheet/"}}},{"node":{"excerpt":"Postman has been my goto tool for API testing for the past year or so. When\nI hit a wall with using it I turn to All Things Postman.\nBut I realized most of what I end up looking for is the basic stuff…","html":"<p><a href=\"https://www.getpostman.com/\">Postman</a> has been my goto tool for API testing for the past year or so. When\nI hit a wall with using it I turn to <a href=\"https://github.com/DannyDainton/All-Things-Postman\">All Things Postman</a>.\nBut I realized most of what I end up looking for is the basic stuff that covers 90 percent of my\ndaily use in one place.</p>\n<h3>Environment Variables</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">pm.environment.set(&#39;someVariable&#39;, someValue)\npm.environment.get(&#39;someVariable&#39;)\npm.environment.unset(&#39;someVariable&#39;)</code></pre></div>\n<h3>Lodash</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//select random item from an array\n_.sample([a, b, c])\n\n//random number within a range\n_.random(1, 10)\n\n//repeat a command\n_.times(5, () =&gt; {\n    //do stuff\n})</code></pre></div>\n<h3>Moment</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const now = moment()\nconst tomorrow = moment().add(1, &#39;day&#39;)</code></pre></div>\n<h3>JWT Token</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const jwt = jsonData.access_token.split(&#39;.&#39;)\nconsole.log(JSON.parse(atob(jwt[1])))</code></pre></div>\n<h3>Tests</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">pm.test(&#39;example test&#39;, () =&gt; {\n    pm.expect(pm.response.code).to.eql(200)\n    pm.expect(pm.response.status).to.eql(&#39;OK&#39;)\n\n    const response = pm.resonse.json()\n\n    if response.length === null throw new ERROR(    )\n\n    //verify response value\n    pm.expect(response.name).to.eql(&#39;Marc&#39;)\n\n    //verify a date is a valid date\n    pm.expect(moment(response.date).isValid()).to.be.true\n\n    //verify result matches a regex\n    pm.expect(response.name).to.match(/[A-Z}{1}[a-z]{3}/)\n\n    //verify type of object\n    pm.expect(response.name).to.be.a(&#39;string&#39;)\n\n    //verify a header value\n    pm.expect(postman.getResponseHeader(&#39;some-header&#39;))\n        .to.eql(&#39;some-value&#39;)\n})</code></pre></div>\n<h3>Scripts</h3>\n<p>Send a post request</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">pm.sendRequest(\n  {\n    url: &#39;http://testurl&#39;,\n    method: &#39;POST&#39;,\n    header: {\n      &#39;Content-Type&#39;: &#39;application/json&#39;\n    },\n    body: {\n      mode: &#39;raw&#39;,\n      raw: JSON.stringify(someJSON)\n    }\n  },\n  (err, res) =&gt; {\n    console.log(err ? err : res.json())\n  }\n)</code></pre></div>\n<p>Set next request (Note that this uses <code class=\"language-text\">postman</code> object and\nnot <code class=\"language-text\">pm</code> obect)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">postman.setNextRequest(&#39;name of request&#39;)</code></pre></div>\n<h3>Newman</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//run a collection\nnewman run my_collection.postman_collection.json\n\n//run with environment file\nnewman run my_collection.postman_collection.json\n-e my_environment.postman_environment.json\n\n//run with data file\nnewman run my_collection.postman_collection.jsonn -d data.json\n\n//disable SSL validations (useful if running through a proxy)\nnewman run my_collection.postman_collection.json --insecure</code></pre></div>","id":"4ac8deef-8269-56c2-90ac-d82e05c2a4c2","frontmatter":{"title":"Postman cheat sheet","date":"June 12, 2019","tags":["postman","newman","lodash","moment"]},"fields":{"slug":"/postman-cheat-sheet/"}}}]}},"pageContext":{"limit":3,"skip":6,"numPages":6,"currentPage":3}},"staticQueryHashes":["392256161","551055924","63159454"]}