{"componentChunkName":"component---src-templates-blog-post-js","path":"/nginx-proxy-filter/","result":{"data":{"site":{"siteMetadata":{"url":"https://howdoitestthat.com","title":"How Do I Test That?","labels":[{"tag":"web","tech":"Web","name":"FaChrome","size":20,"color":"white"},{"tag":"react","tech":"React","name":"DiReact","size":20,"color":"deepskyblue"},{"tag":"git","tech":"Git","name":"DiGitMerge","size":20,"color":"white"},{"tag":"javascript","tech":"JavaScript","name":"DiJsBadge","size":20,"color":"yellow"},{"tag":"css","tech":"CSS","name":"DiCss3Full","size":20,"color":"teal"},{"tag":"python","tech":"Python","name":"DiPython","size":20,"color":"deepskyblue"},{"tag":"nodejs","tech":"Node.js","name":"DiNodejsSmall","size":20,"color":"lightgreen"},{"tag":"ruby","tech":"Ruby","name":"DiRuby","size":20,"color":"crimson"},{"tag":"java","tech":"Java","name":"FaJava","size":20,"color":"wheat"},{"tag":"angular","tech":"Angular","name":"DiAngularSimple","size":20,"color":"red"},{"tag":"html","tech":"HTML","name":"FaHtml5","size":20,"color":"darkorange"},{"tag":"php","tech":"php","name":"DiPhp","size":20,"color":"violet"},{"tag":"mongodb","tech":"MongoDB","name":"DiMongodb","size":20,"color":"green"},{"tag":"mongoose","tech":"Mongoose","name":"DiMongodb","size":20,"color":"green"},{"tag":"vscode","tech":"VS Code","name":"DiVisualstudio","size":20,"color":"deepskyblue"},{"tag":"android","tech":"Android","name":"DiAndroid","size":20,"color":"green"},{"tag":"ios","tech":"iOS","name":"FaApple","size":20,"color":"white"},{"tag":"cli","tech":"cli","name":"DiTerminal","size":20,"color":"white"},{"tag":"curl","tech":"curl","name":"DiTerminal","size":20,"color":"white"},{"tag":"mobile","tech":"Mobile","name":"FaMobileAlt","size":20,"color":"white"},{"tag":"proxy","tech":"proxy","name":"FaServer","size":20,"color":"white"},{"tag":"charlesproxy","tech":"CharlesProxy","name":"FaTools","size":20,"color":"white"},{"tag":"mitmproxy","tech":"mitmproxy","name":"FaTools","size":20,"color":"white"},{"tag":"postman","tech":"Postman","name":"DiTerminal","size":20,"color":"white"},{"tag":"newman","tech":"Newman","name":"FaTools","size":20,"color":"white"},{"tag":"express","tech":"Express","name":"FaJsSquare","size":20,"color":"white"},{"tag":"webserver","tech":"webserver","name":"FaServer","size":20,"color":"white"},{"tag":"nginx","tech":"NGINX","name":"FaServer","size":20,"color":"white"},{"tag":"apitesting","tech":"APITesting","name":"FaServer","size":20,"color":"white"},{"tag":"serveo","tech":"Serveo","name":"FaTools","size":20,"color":"white"},{"tag":"ngrok","tech":"ngrok","name":"FaTools","size":20,"color":"white"},{"tag":"localtunnel","tech":"Localtunnel","name":"FaTools","size":20,"color":"white"},{"tag":"network","tech":"Network","name":"FaEthernet","size":20,"color":"white"},{"tag":"lodash","tech":"Lodash","name":"FaJsSquare","size":20,"color":"white"},{"tag":"moment","tech":"Moment","name":"FaJsSquare","size":20,"color":"white"}]}},"markdownRemark":{"html":"<p>The first question I ask when trying to figure out how to test something is \"what are the moving parts?\" I'm\nalways trying to see what is changing the helps understand what the application is doing. I'm looking for\nthings like database records that are touched or log file output. And in a lot of applications, it's\nnetwork requests.</p>\n<p>For network requests, knowing how to use a proxy is an invaluable tool. My current proxy of choice is\n<a href=\"https://www.charlesproxy.com/\">Charles Proxy</a>, but will turn to <a href=\"https://mitmproxy.org/\">mitmproxy</a> in a pinch.</p>\n<p>One of the apps I'm currently testing includes <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Preflight_request\">preflight requests</a>\nfor all API requests. I was trying to use Charles to rewrite some of the requests for some of the tests, but\ncouldn't find any way within Charles to distinguish between OPTIONS requests and POST requests. This was causing\nthe OPTIONS requests to get rewritten in a way that the app didn't care for.</p>\n<p>The solution I came up with was to use (NGINX)[https://www.nginx.com/] as a proxy to filter the requests before\nthey get to Charles. This allows me to route the OPTIONS request directly to the server to deal with and the POST\nrequests are sent to the proxy where they can manipulated for testing.</p>\n<p>The nginx.conf for this setup looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">server {\n\tlisten 8085;\n\terror_page 405 =200 $uri;\n\tlocation / {\n\t\tif ($request_method = OPTIONS) {\n\t\t\tproxy_pass REMOTE_HOST;\n\t\t}\n\t\tif ($request_method != OPTIONS) {\n\t\t\tproxy_pass LOCAL_HOST:8084;\n\t\t}\n\t}\n}</code></pre></div>\n<p>This will run NGINX on port 8085 and redirect all non-OPTIONS requests to a proxy\nserver running on port 8084. The proxy server needs to be configured as a reverse\nproxy on port 8084.</p>\n<h3>TL;DR</h3>\n<ol>\n<li>Configure a reverse proxy to listen on port 8084</li>\n<li>Configure app to use proxy on port 8085</li>\n<li><code class=\"language-text\">git clone git@github.com:marcallenbetts/nginx-proxy-and-errors.git</code></li>\n<li><code class=\"language-text\">docker-compose up --build</code></li>\n</ol>","frontmatter":{"title":"Using NGINX as a filtering proxy","date":"December 23, 2018","tags":["nginx","proxy","charlesproxy","mitmproxy","webserver"]}}},"pageContext":{"slug":"/nginx-proxy-filter/"}},"staticQueryHashes":["392256161","551055924","63159454"]}